const MAJOR = 9
const MINOR = 10
const PATCH = 65536 * 256 - 1

const COMMAND_ADDRESS = 0xC00000
const NEWLINE = 0xC00800
const FILE_BUFFER = 0xC01000
let command_length = 0
let frame = 0

const VERSION_BUFFER = 0xC02000

main() {
	init_sin8()
	// [PCM_ENABLE] = 1
	[COMMAND_ADDRESS] = 0
	[NEWLINE] = 0x0A
	let name = "kitty24"
	if 0 < 1 {
		name = "kitty25"
	} else if 2 < 3 {
		name = "kitty26"
	} else {
		name = "kitty27"
	}
	print(name)
	print(" ")
	string_from_number(MAJOR, VERSION_BUFFER)
	print(VERSION_BUFFER)
	print(".")
	string_from_number(MINOR, VERSION_BUFFER)
	print(VERSION_BUFFER)
	print(".")
	string_from_number(PATCH, VERSION_BUFFER)
	println(VERSION_BUFFER)
	print("type `help` for help\n")
	print("$ ")
	loop {}
}

command() {
	if
		[COMMAND_ADDRESS + 0] == 72 + 32 && // 'h' &&
		[COMMAND_ADDRESS + 1] == 69 + 32 && // 'e' &&
		[COMMAND_ADDRESS + 2] == 76 + 32 && // 'l' &&
		[COMMAND_ADDRESS + 3] == 80 + 32 // 'p'
	{
		print(COMMAND_ADDRESS)
		print(NEWLINE)
		[COMMAND_ADDRESS] = 0
		command_length = 0
		print(/help)
		print(NEWLINE)
		print(/prompt)
	} else if
		[COMMAND_ADDRESS + 0] == 69 + 32 && // 'e' &&
		[COMMAND_ADDRESS + 1] == 68 + 32 && // 'd' &&
		[COMMAND_ADDRESS + 2] == 73 + 32 && // 'i' &&
		[COMMAND_ADDRESS + 3] == 84 + 32 && // 't' &&
		[COMMAND_ADDRESS + 4] == 32 // ' '
	{
		let file_name_address = COMMAND_ADDRESS + 5
		let length = 0
		while [file_name_address + length] > 0 {
			length = length + 1
		}
		// Open file for reading
		io(OPEN, file_name_address, length)
		print(COMMAND_ADDRESS)
		print(NEWLINE)
		print(/edit)
		print(NEWLINE)
		
		// Read file to [FILE_BUFFER] and print
		let length = io(READ, FILE_BUFFER, 65536)
		[FILE_BUFFER + length] = 0
		print(FILE_BUFFER)
		print(NEWLINE)
		print(/prompt)
		[COMMAND_ADDRESS] = 0
		command_length = 0
	} else if
		[COMMAND_ADDRESS + 0] == 83 + 32 && // 's' &&
		[COMMAND_ADDRESS + 1] == 65 + 32 && // 'a' &&
		[COMMAND_ADDRESS + 2] == 86 + 32 && // 'v' &&
		[COMMAND_ADDRESS + 3] == 69 + 32 && // 'e' &&
		[COMMAND_ADDRESS + 4] == 32 // ' '
	{
		let string_address = COMMAND_ADDRESS + 5
		let length = 0
		while [string_address + length] > 0 {
			length = length + 1
		}
		io(WRITE, string_address, length)
		print(COMMAND_ADDRESS)
		print(NEWLINE)
		print(/prompt)
		[COMMAND_ADDRESS] = 0
		command_length = 0
	} else {
		[IO_TYPE]:3 = RUN
		[IO_DATA]:3 = COMMAND_ADDRESS
		[IO_LENGTH]:3 = command_length
		print(COMMAND_ADDRESS)
		print(NEWLINE)
		print(/error)
		print(NEWLINE)
		print(/prompt)
		[COMMAND_ADDRESS] = 0
		command_length = 0
	}
}

const BUFFER_ADDRESS = 0xD00000
let s = 0

PCM!(length) {
	let i = 0
	while i < length {
		[BUFFER_ADDRESS + i] = sin8(s)
		s = s + 1
		i = i + 1
	}
	io(PCM_BUFFER, BUFFER_ADDRESS, length)
}

let t = 0
const T_BUFFER = 0xC04000
VBLANK!() {
	clear(240)
	
	if frame < 16 {
		palette(3, 0)
	} else if frame < 32 {
		palette(3, 1)
	} else if frame < 48 {
		palette(3, 2)
	} else {
		palette(3, 3)
	}
	// Draw entire console, and save the end cursor position.
	let x, y = text(CONSOLE_ADDRESS, 0, 0)
	palette(3, 3)

	// Draw cursor.
	let dx = command_length * 6
	rectangle_fill(
		x + dx + (sin8(frame * 12) >> 6) - 1,
		y + (sin8(frame * 12 + 64) >> 6) - 1,
		6,
		12,
		frame >> 4
	)

	// Draw command text in a different color.
	palette(3, 2)
	text(COMMAND_ADDRESS, x, y)
	palette(3, 3)

	// Draw total frames counter, squashed and stretched.
	string_from_number(t, T_BUFFER)
	let x, y = 0, 120
	let scale_x = sin8(t) >> 2
	let scale_y = sin8(t + 64) >> 2
	
	text_scaled(T_BUFFER, x, y, 2 + scale_x, 2 + scale_y)

	if frame < 64 {
		frame = frame + 1
	} else {
		frame = 0
	}

	t = t + 1
}

KEY_DOWN!(key) {
	if key == KEY_BACKSPACE && command_length > 0 {
		command_length = command_length - 1
		[COMMAND_ADDRESS + command_length] = 0
	}
	if key == KEY_RETURN {
		command()
	}
}

TEXT_INPUT!(character) {
	[COMMAND_ADDRESS + command_length] = character
	command_length = command_length + 1
	[COMMAND_ADDRESS + command_length] = 0
}