editor_read_dir() {
	// Initialize and populate list buffer
	let buffer = allocate(256)
	let length = io(READ_DIR, buffer, 256)	
	[buffer + length] = 0x00
	
	// Parse buffer, splitting on '\n'
	let entry_address = buffer
	let char = [entry_address]
	let meta_buffer = allocate(1)
	let i = 0
	while i < length {
		let entry_length = 0
		while char != '\n' && i < length {
			i = i + 1
			entry_length = entry_length + 1
			char = [entry_address + entry_length]
		}
		io(OPEN, entry_address, entry_length)
		io(READ_META, meta_buffer, 1)

		let destination = editor_files + editor_files_length
		[destination]:3 = entry_length
		[destination + entry_length + 3] = [meta_buffer]
		memcopy(entry_address, destination + 3, entry_length)
		editor_files_length = editor_files_length + entry_length + 4
		
		entry_address = entry_address + entry_length
		i = i + 1
		char = [entry_address]
		while char == '\n' {
			entry_address = entry_address + 1
			i = i + 1
			char = [entry_address]
		}
	}

	deallocate(meta_buffer, 1)
	deallocate(buffer, 256)
}

editor_read_file(file_name) {
	io(OPEN, file_name + 3, [file_name]:3)
	let file_buffer = allocate(65536)
	if file_buffer == 0 {
		debug_string = number_to_hex_string([HEAP_HEAD]:3)
		return
	}
	let file_length = io(READ, file_buffer, 65536)

	let i = 0
	let char = [file_buffer]
	let line_count = 0
	while i < file_length && line_count < EDITOR_MAX_LINES {
		let length = 0
		let pointer_destination = editor_lines + line_count * 3 + 3
		[pointer_destination]:3 = allocate(EDITOR_MAX_LINE_LENGTH + 3)
		while char != '\n' {
			if i >= file_length || length >= EDITOR_MAX_LINE_LENGTH {
				break
			}
			[[pointer_destination]:3 + 3 + length] = char
			length = length + 1
			i = i + 1
			char = [file_buffer + i]
		}
		[[pointer_destination]:3]:3 = length
		line_count = line_count + 1
		i = i + 1
		char = [file_buffer + i]
	}
	[editor_lines]:3 = line_count
	
	deallocate(file_buffer)
}

editor_write_file(file_name) {
	io(OPEN, file_name + 3, [file_name]:3)
	
	// Determine how many bytes to allocate for the file buffer by counting up
	// line lengths, then allocate it.
	let file_buffer_length = 0
	let line_count = [editor_lines]:3
	let i = 0
	while i < line_count {
		let line = [editor_lines + 3 + i * 3]:3
		let line_length = [line]:3
		file_buffer_length = file_buffer_length + line_length + 1 // 1 for newline
		i = i + 1
	}
	let file_buffer = allocate(file_buffer_length)

	// Concatenate a string from every line into the file buffer.
	let i = 0
	let buffer_offset = 0
	while i < line_count {
		let line = [editor_lines + 3 + i * 3]:3
		let line_length = [line]:3
		memcopy(line + 3, file_buffer + buffer_offset, line_length)
		[file_buffer + buffer_offset + line_length] = '\n'
		buffer_offset = buffer_offset + line_length + 1 // 1 for newline
		i = i + 1
	}

	// Write buffer to open file.
	io(WRITE, file_buffer, file_buffer_length - 1) // -1 for last newline
	
	deallocate(file_buffer)
}